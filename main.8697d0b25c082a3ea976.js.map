{"version":3,"sources":["webpack:///./task2.js","webpack:///./task3.js","webpack:///./index.js","webpack:///./task1.js"],"names":["users","name","active","toggleUserState","allUsers","userName","Promise","resolve","reject","map","user","logger2","updatedUsers","console","table","then","makeTransaction","transaction","delay","min","max","Math","floor","random","setTimeout","id","logSuccess","time","log","logError","warn","amount","catch","ms","logger"],"mappings":"8EAEA,MAAMA,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,IAC1B,IAAIC,SAAQ,SAAUC,EAASC,GAKpCD,EAJqBH,EAASK,IAAKC,GACjCA,EAAKT,OAASI,EAAW,IAAKK,EAAMR,QAASQ,EAAKR,QAAWQ,OAO7DC,EAAWC,GAAiBC,QAAQC,MAAMF,GAYhDT,EAAgBH,EAAO,SAASe,KAAKJ,GACrCR,EAAgBH,EAAO,OAAOe,KAAKJ,I,qBChCnC,MAIMK,EAAmBC,GAChB,IAAIX,SAAQ,SAAUC,EAASC,GAEpC,MAAMU,GAPyBC,EAOS,IAPJC,EAOS,IANxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IADpB,IAACA,EAAKC,EASpCI,WAAW,KACUH,KAAKE,SAAW,GAGjChB,EAAQU,EAAYQ,GAAIP,GAExBV,EAAOS,EAAYQ,KAEpBP,MAIDQ,EAAa,CAACD,EAAIE,KACtBd,QAAQe,IAAK,eAAcH,kBAAmBE,QAG1CE,EAAYJ,IAChBZ,QAAQiB,KAAM,gCAA+BL,+BAa/CT,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAAOhB,KAAKW,GAAYM,MAAMH,GAEhEb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAAOhB,KAAKW,GAAYM,MAAMH,GAEhEb,EAAgB,CAAES,GAAI,GAAIM,OAAQ,KAAMhB,KAAKW,GAAYM,MAAMH,GAE/Db,EAAgB,CAAES,GAAI,GAAIM,OAAQ,MAAOhB,KAAKW,GAAYM,MAAMH,I,kCC7ChE,sC,mBCEA,MAAMX,EAASe,GACN,IAAI3B,QAAQ,CAACC,EAASC,KAC3BgB,WAAW,KACTjB,EAAQ0B,IACPA,KAIDC,EAAUP,GAASd,QAAQe,IAAK,kBAAiBD,OAGvDT,EAAM,KAAMH,KAAKmB,GACjBhB,EAAM,KAAMH,KAAKmB,GACjBhB,EAAM,MAAMH,KAAKmB,K","file":"main.8697d0b25c082a3ea976.js","sourcesContent":["//Задание 2\n\nconst users = [\n  { name: \"Mango\", active: true },\n  { name: \"Poly\", active: false },\n  { name: \"Ajax\", active: true },\n  { name: \"Lux\", active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  return new Promise(function (resolve, reject) {\n    const updatedUsers = allUsers.map((user) =>\n      user.name === userName ? { ...user, active: !user.active } : user\n    );\n\n    resolve(updatedUsers);\n  });\n};\n\nconst logger2 = (updatedUsers) => console.table(updatedUsers);\n\n/*\n * Сейчас работает так\n */\n// toggleUserState(users, \"Mango\", logger);\n// toggleUserState(users, \"Lux\", logger);\n\n/*\n * Должно работать так\n */\n\ntoggleUserState(users, \"Mango\").then(logger2);\ntoggleUserState(users, \"Lux\").then(logger2);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction) => {\n  return new Promise(function (resolve, reject) {\n    //\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve(transaction.id, delay);\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = (id, time) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = (id) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n/*\n * Работает так\n */\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\n/*\n * Должно работать так\n */\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import \"./task1\";\nimport \"./task2\";\nimport \"./task3\";\n","//Задание 1\n\nconst delay = (ms) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = (time) => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n"],"sourceRoot":""}